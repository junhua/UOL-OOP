# Project Rules and Patterns

## Project Structure
- MerkelRex development in Topics 1-5
- OtoDecks development in Topics 6-10
- Lab progression follows tutorial modules
- Each topic has Starter and Final versions

## Code Organization
- Class definitions in separate .h files
- Implementations in corresponding .cpp files
- Main application entry points in main.cpp
- JUCE components in dedicated files

## Naming Conventions
- Class names: PascalCase (e.g., OrderBookEntry)
- Methods/Functions: camelCase (e.g., processOrder)
- Variables: camelCase (e.g., orderBook)
- Constants: UPPER_SNAKE_CASE
- Files: Match class names for classes

## Documentation Patterns
- Memory bank updates after significant changes
- Regular progress tracking
- Clear commit messages
- Code comments for complex logic

## Development Workflow
- Start from Starter code in each topic
- Progress through lab exercises
- Reference Final code when needed
- Maintain test coverage

## File Organization
- Source files in appropriate topic directories
- Resource files in dedicated folders
- Test files alongside source code
- Documentation in memory-bank/

## Code Style
- Consistent indentation
- Clear function purposes
- Error handling patterns
- Resource management

## Testing Approach
- Unit tests for components
- Integration tests for systems
- Manual testing for UI/UX
- Performance testing when needed

## Memory Bank Management
- Regular updates to activeContext.md
- Track progress in progress.md
- Document decisions in systemPatterns.md
- Keep technical details in techContext.md
